{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","resolution","count","totcount","setup","p5","canvasParentRef","canvas","createCanvas","windowWidth","windowHeight","parent","cols","Math","floor","rows","grid","Array","map","e","value","random","position","style","draw","background","i","j","x","y","fill","stroke","rect","next","status","neighbors","countNeighbors","noLoop","sum","yIndex","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oOA4FeA,E,4MAlFZC,WAAa,G,EACbC,MAAQ,E,EACRC,SAAW,E,EAIXC,MAAQ,SAACC,EAAIC,GACT,IAAIC,EAASF,EAAGG,aAAaH,EAAGI,YAAaJ,EAAGK,cAAcC,OAAOL,GACrE,EAAKM,KAAOC,KAAKC,MAAMT,EAAGI,YAAc,EAAKR,YAC7C,EAAKc,KAAOF,KAAKC,MAAMT,EAAGK,aAAe,EAAKT,YAC9C,EAAKe,KAAO,YAAIC,MAAM,EAAKL,OAAOM,KAAI,SAAAC,GAAC,OAAI,YAAIF,MAAM,EAAKF,OAAOG,KAAI,SAAAE,GAAK,OAAIP,KAAKC,MAAM,EAAED,KAAKQ,gBAChGd,EAAOe,SAAS,EAAE,GAClBf,EAAOgB,MAAM,UAAU,O,EAI3BC,KAAO,SAACnB,GACJ,EAAKH,OAAS,EACd,EAAKC,UAAY,EAOjBE,EAAGoB,WAAW,IAAK,IAAK,KACxB,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAKd,KAAMc,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAKZ,KAAMY,IAAK,CAClC,IAAIC,EAAIF,EAAI,EAAKzB,WACb4B,EAAIF,EAAI,EAAK1B,WACO,IAApB,EAAKe,KAAKU,GAAGC,KACftB,EAAGyB,KAAK,CAAC,IAAK,IAAK,IAAI,KACvBzB,EAAG0B,OAAO,CAAC,GAAI,EAAG,IAAK,KAGvB1B,EAAG2B,KAAKJ,EAAGC,EAAG,EAAK5B,WAAa,EAAG,EAAKA,WAAa,IAO3D,IAFA,IAAIgC,EAAO,EAAKjB,KAAKE,KAAI,SAAAH,GAAI,OAAIA,EAAKG,KAAI,SAAAE,GAAK,OAAI,QAE1CM,EAAI,EAAGA,EAAI,EAAKd,KAAMc,IAC7B,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAKZ,KAAMY,IAAK,CAClC,IAAIO,EAAS,EAAKlB,KAAKU,GAAGC,GACtBQ,EAAY,EAAKC,eAAe,EAAKpB,KAAMU,EAAGC,EAAG,EAAKf,KAAM,EAAKG,MAEnEkB,EAAKP,GAAGC,GADK,IAAXO,GAA8B,IAAdC,EACL,EACO,IAAXD,IAAiBC,EAAY,GAAKA,EAAY,GAC1C,EAEAD,EAMnB,EAAKlB,KAAOiB,EAIO,MAAf,EAAK/B,OACLG,EAAGgC,U,EAMXD,eAAiB,SAACpB,EAAMY,EAAGC,EAAGjB,EAAMG,GAEhC,IADA,IAAIuB,EAAM,EACDZ,GAAK,EAAGA,EAAI,EAAGA,IACxB,IAAK,IAAIC,GAAK,EAAGA,EAAI,EAAGA,IAAK,CACzB,IACIY,GAAUV,EAAIF,EAAIZ,GAAQA,EAC9BuB,GAAOtB,GAFOY,EAAIF,EAAId,GAAQA,GAEV2B,GAIxB,OADAD,GAAOtB,EAAKY,GAAGC,I,uDAGT,OAAQ,6BAAK,kBAAC,IAAD,CAAQN,MAAS,CAACD,SAAS,YAAalB,MAAOoC,KAAKpC,MAAOoB,KAAMgB,KAAKhB,Y,GAvF9EiB,IAAMC,WCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c00a09fd.chunk.js","sourcesContent":["import React from 'react';\nimport Sketch from \"react-p5\";\n\nclass App extends React.Component{  \n\n   // added by me to put in new \n   grid;\n   next\n   cols;\n   rows;\n   resolution = 14;\n   count = 0\n   totcount = 0\n   //\n   \n\n   setup = (p5, canvasParentRef) => {\n       let canvas = p5.createCanvas(p5.windowWidth, p5.windowHeight).parent(canvasParentRef);\n       this.cols = Math.floor(p5.windowWidth / this.resolution);\n       this.rows = Math.floor(p5.windowHeight / this.resolution);\n       this.grid = [...Array(this.cols)].map(e => [...Array(this.rows)].map(value => Math.floor(2*Math.random())));\n       canvas.position(0,0);\n       canvas.style('z-index','-1')\n\n   }\n\n   draw = (p5) => {\n       this.count += 1\n       this.totcount += 1\n     \n       //if (this.count == 400) {\n       //  this.count = 0\n       //  this.setup()\n       //}\n      \n       p5.background(248, 249, 252);\n       for (let i = 0; i < this.cols; i++) {\n         for (let j = 0; j < this.rows; j++) {\n           let x = i * this.resolution\n           let y = j * this.resolution\n           if (this.grid[i][j] === 1) {\n             p5.fill([197, 158, 187,50])\n             p5.stroke([81, 4, 114, 80]);\n             //p5.fill([123, 203, 183,50] )\n             //p5.stroke([123, 203, 183,80] );\n             p5.rect(x, y, this.resolution - 1, this.resolution - 1)\n           }\n         }\n       }\n         \n       let next = this.grid.map(rows => rows.map(value => 0))\n\n       for (let i = 0; i < this.cols; i++) {\n         for (let j = 0; j < this.rows; j++) {\n           let status = this.grid[i][j]\n           let neighbors = this.countNeighbors(this.grid, i, j, this.cols, this.rows)\n           if (status === 0 && neighbors === 3) {\n             next[i][j] = 1\n           } else if (status === 1 && (neighbors < 2 || neighbors > 3)) {\n             next[i][j] = 0\n           } else {\n             next[i][j] = status\n           }\n     \n         \n       }\n   }\n       this.grid = next;\n         \n      \n       \n       if (this.count === 400) {\n           p5.noLoop()\n       }\n       \n   }\n\n\n   countNeighbors = (grid, x, y, cols, rows) => {\n       let sum = 0\n       for (let i = -1; i < 2; i++) {\n       for (let j = -1; j < 2; j++) {\n           let xIndex = (x + i + cols) % cols\n           let yIndex = (y + j + rows) % rows\n           sum += grid[xIndex][yIndex]\n       }\n       }\n       sum -= grid[x][y];\n       return sum;\n   }\n    render(){return (<div><Sketch style = {{position:'relative'}} setup={this.setup} draw={this.draw} /></div>)}}\n\nexport default App\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}